<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Centos7安装Redis</title>
      <link href="/2018/04/08/Centos7%E5%AE%89%E8%A3%85Redis/"/>
      <url>/2018/04/08/Centos7%E5%AE%89%E8%A3%85Redis/</url>
      <content type="html"><![CDATA[<p>安装环境：CentOS7 64位、Redis-4.0.8</p><hr><h1 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h1><ul><li>切换到安装目录<br><code>cd /usr/local/</code></li><li>添加安装目录<br><code>mkdir redis</code></li><li>切换安装目录<br><code>cd redis</code></li><li>下载安装包<br><code>wget http://download.redis.io/releases/redis-4.0.8.tar.gz</code></li><li>解压<br><code>tar xzf redis-4.0.8.tar.gz</code>  </li></ul><h1 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h1><p>如果不安装gcc 编译redis会报错<img src="/img/error.png" alt="error"><br><code>yum install gcc</code></p><h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><p><code>cd redis/redis-4.0.8/</code><br><code>make MALLOC=libc</code><br>Redis并没有自己实现内存池，没有在标准的系统内存分配器上再加上自己的东西。所以需要配置内存分配。<br>不执行以上命令编译会报下面的错<img src="/img/error1.png" alt="error"><br>编译redis<br><code>cd src &amp;&amp; make install</code><img src="/img/redis-1.png" alt="redis">  </p><h1 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h1><p><code>./redis-server</code><br><img src="/img/redis-2.png" alt="redis"><br>如上图：redis启动成功，但是这种启动方式需要一直打开窗口，不能进行其他操作，不太方便。</p><h2 id="以后台进程方式启动redis"><a href="#以后台进程方式启动redis" class="headerlink" title="以后台进程方式启动redis"></a>以后台进程方式启动redis</h2><ul><li>修改redis.conf文件<br><code>vim /usr/local/redis/redis-4.0.8/redis.conf</code><br>将<code>daemonize no</code> 改为<code>daemonize yes</code></li><li>指定redis.conf启动<br><code>./redis-server /usr/local/redis/redis-4.0.8/redis.conf</code><h3 id="设置redis-开机启动"><a href="#设置redis-开机启动" class="headerlink" title="设置redis 开机启动"></a>设置redis 开机启动</h3></li><li>在/etc目录下新建redis目录<br><code>mkdir redis</code></li><li>复制redis 配置文件<br><code>cp /usr/local/redis/redis-4.0.8/redis.conf /etc/redis/6379.conf</code></li><li>复制redis 脚本到启动脚本目录中<br><code>cp /usr/local/redis/redis-4.0.8/utils/redis_init_script /etc/init.d/redisd</code></li><li>切换到自启目录<br><code>cd /etc/init.d</code><br><code>chkconfig redisd on</code><br>会显示<code>service redisd does not support chkconfig</code><br>看结果是redisd不支持chkconfig  </li></ul><p>解决方法：<br>使用vim编辑redisd文件，在第一行加入如下两行注释，保存退出<br><code># chkconfig:   2345 90 10</code><br><code># description:  Redis is a persistent key-value database</code><br>注释的意思是，redis服务必须在运行级2，3，4，5下被启动或关闭，启动的优先级是90，关闭的优先级是10。<br>再次执行开机自启命令，成功<br><code>chkconfig redisd on</code></p><h1 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h1><p>现在可以直接已服务的形式启动和关闭redis了<br>启动：<br><code>service redisd start</code><br><img src="/img/redis-3.png" alt="redis"><br>关闭：<br><code>service redisd stop</code><br><img src="/img/redis-4.png" alt="redis"> </p><h1 id="过程中的问题"><a href="#过程中的问题" class="headerlink" title="过程中的问题"></a>过程中的问题</h1><h2 id="service-redisd-stop出现以下问题"><a href="#service-redisd-stop出现以下问题" class="headerlink" title="service redisd stop出现以下问题"></a>service redisd stop出现以下问题</h2><blockquote><p>Stopping …<br>(error) NOAUTH Authentication required.  </p></blockquote><p>解决方法：因为我在配置redis 时候 配置了密码连接 所以 出现上面的问题,如果不配置 则不需要以下配置。修改启动脚本<br><code>vim /etc/init.d/redisd</code><br>增加密码设置变量,密码是你设置的redis密码<br><img src="/img/redis-5.png" alt="redis">  </p><h2 id="service启动或者关闭时出现以下问题"><a href="#service启动或者关闭时出现以下问题" class="headerlink" title="service启动或者关闭时出现以下问题"></a>service启动或者关闭时出现以下问题</h2><blockquote><p>/var/run/redis_6379.pid exists, process is already running or crashed  </p></blockquote><p>解决方法：出现这个问题是因为redis 关闭不正常，导致文件没有被删除掉。<br>执行以下命令即可删除<br><code>rm -rf /var/run/redis_6379.pid</code></p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos7安装JDK1.8</title>
      <link href="/2018/04/08/Centos7%E5%AE%89%E8%A3%85JDK1.8/"/>
      <url>/2018/04/08/Centos7%E5%AE%89%E8%A3%85JDK1.8/</url>
      <content type="html"><![CDATA[<p>安装环境：CentOS7 64位、JDK1.8</p><hr><h1 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h1><ul><li>切换到安装目录<br><code>cd /usr/local/</code></li><li>添加安装目录<br><code>mkdir java</code></li><li>切换安装目录<br><code>cd java</code></li><li>下载安装包<br><code>wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz&quot;</code></li><li>解压<br><code>tar xzf jdk-8u161-linux-x64.tar.gz</code>  </li></ul><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><ul><li><p>修改配置文件<br><code>vim /etc/profile</code><br> 添加以下配置<br><code>JAVA_HOME=/usr/local/java/jdk1.8.0_161</code><br><code>JRE_HOME=/usr/local/java/jdk1.8.0_161/jre</code><br><code>CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</code><br><code>PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</code><br><code>export JAVA_HOME JRE_HOME CLASS_PATH PATH</code></p></li><li><p>更新文件<br><code>source /etc/profile</code></p></li><li>验证<br><code>java -verion</code><img src="/img/java.png" alt="java"><br><code>javac -version</code></li></ul>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> JDK1.8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos7安装MySQL5.7</title>
      <link href="/2018/03/27/Centos7%E5%AE%89%E8%A3%85MySQL5.7/"/>
      <url>/2018/03/27/Centos7%E5%AE%89%E8%A3%85MySQL5.7/</url>
      <content type="html"><![CDATA[<p>安装环境：CentOS7 64位、MySQL5.7</p><hr><h1 id="配置安装环境"><a href="#配置安装环境" class="headerlink" title="配置安装环境"></a>配置安装环境</h1><h2 id="配置yum源rpm安装包"><a href="#配置yum源rpm安装包" class="headerlink" title="配置yum源rpm安装包"></a>配置yum源rpm安装包</h2><p><code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code></p><h2 id="安装MySQL源"><a href="#安装MySQL源" class="headerlink" title="安装MySQL源"></a>安装MySQL源</h2><p><code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p><h2 id="检查mysql源是否安装成功"><a href="#检查mysql源是否安装成功" class="headerlink" title="检查mysql源是否安装成功"></a>检查mysql源是否安装成功</h2><p><code>yum repolist enabled | grep &quot;mysql.*-community.*&quot;</code><br><img src="/img/mysql_1.png" alt="mysql"><br>看到上图表示安装成功</p><h2 id="修改MySQL版本"><a href="#修改MySQL版本" class="headerlink" title="修改MySQL版本"></a>修改MySQL版本</h2><p>若默认安装5.7的话就不需要修改,修改源文件<br><code>vim /etc/yum.repos.d/mysql-community.repo</code><br>改变enabled属性改为1即可<br><img src="/img/mysql_2.png" alt="mysql">  </p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p> <code>yum install mysql-community-server</code><br>一轮等待后 安装成功</p><h1 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h1><p> <code>systemctl start mysqld</code></p><h2 id="查看MySQL状态"><a href="#查看MySQL状态" class="headerlink" title="查看MySQL状态"></a>查看MySQL状态</h2><p> <code>systemctl status mysqld</code><br>     <img src="/img/mysql_3.png" alt="mysql">  </p><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><p> <code>systemctl enable mysqld</code><br> <code>systemctl daemon-reload</code></p><h1 id="修改root本地登陆密码"><a href="#修改root本地登陆密码" class="headerlink" title="修改root本地登陆密码"></a>修改root本地登陆密码</h1><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码<br>查看文件<br> <code>grep &#39;temporary password&#39; /var/log/mysqld.log</code><br>    <img src="/img/mysql_4.png" alt="mysql">  </p><h2 id="登陆MySQL-修改密码"><a href="#登陆MySQL-修改密码" class="headerlink" title="登陆MySQL 修改密码"></a>登陆MySQL 修改密码</h2><p> <code>mysql -uroot -p</code><br> <code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;test!Wwh&#39;;</code></p><blockquote><p>注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。 </p></blockquote><p>通过msyql环境变量可以查看密码策略的相关信息：<br> <code>show variables like &#39;%password%&#39;;</code><br><img src="/img/mysql_5.png" alt="mysql">  </p><blockquote><p>validate_password_policy：密码策略，默认为MEDIUM策略<br> validate_password_dictionary_file：密码策略文件，策略为STRONG才需要<br> validate_password_length：密码最少长度<br> validate_password_mixed_case_count：大小写字符长度，至少1个<br> validate_password_number_count ：数字至少1个<br> validate_password_special_char_count：特殊字符至少1个<br> 上述参数是默认策略MEDIUM的密码检查规则。<br> 共有以下几种密码策略：<br> 策略  检查规则<br> 0 or LOW    Length<br> 1 or MEDIUM Length; numeric, lowercase/uppercase, and special characters<br> 2 or STRONG Length; numeric, lowercase/uppercase, and special characters; dictionary file<br> MySQL官网密码策略详细说明：<a href="http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy</a> </p></blockquote><h2 id="修改密码策略"><a href="#修改密码策略" class="headerlink" title="修改密码策略"></a>修改密码策略</h2><p>在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略<br><code>validate_password_policy=0</code><br>如果不需要 在my.cnf文件中添加如下配置禁用即可：<br><code>validate_password = off</code><br>重新启动MySQL 配置才会生效<br><code>systemctl restart mysqld</code></p><h1 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h1><p>默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：<br><code>mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;wenthywang&#39;@&#39;%&#39; IDENTIFIED BY &#39;wwhtest123456&#39; WITH GRANT OPTION;</code><br>    添加用户成功后 就可以远程使用mycat等工具连接了。</p><h1 id="配置默认编码utf8"><a href="#配置默认编码utf8" class="headerlink" title="配置默认编码utf8"></a>配置默认编码utf8</h1><p> <code>vim /etc/my.cnf</code><br>   添加以下配置<br> <code>character_set_server=utf8 //指定数据库编码为UTF-8</code><br> <code>port=33060 //指定端口号</code></p><pre><code>重新启动mysql服务，查看数据库默认编码如下所示：</code></pre><p>   <img src="/img/mysql_6.png" alt="mysql">  </p><ul><li>END</li></ul>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的hexo部署到腾讯云服务器</title>
      <link href="/2018/03/07/hexo_deploy/"/>
      <url>/2018/03/07/hexo_deploy/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;最近发现腾讯云搞活动，然后就心血来潮买了个服务器，感觉是挺便宜的（肯定是腾讯的套路），还续费了2年，希望自己能玩好这台服务器。昨天刚买完之后，一直在想不知道用来干嘛，想到现在还是不清楚要搞些撒东西出来，所以索性就先把博客迁移到这台服务器吧。</p><h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><code>yum -y update</code><br><code>yum install -y git nginx</code><br>安装git是因为hexo部署静态资源的时候需要有个git仓库<br>安装nginx用来部署hexo静态资源文件  </p><blockquote><p>git安装后需要配置公钥，打开以下文件,把需要部署的客户端的公钥复制到这个文件中就行，这个操作在部署hexo的时候可以跳过openssh的密码验证。（可以不操作，操作更好）</p></blockquote><ul><li><p>在服务器上操作<br><code>vim ~/.ssh/authorized_keys</code>  </p></li><li><p>在hexo客户端中操作</p></li></ul><p>打开GIT GUI 找到HELP找到SHOW SSH KEY<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAyPyy6mKAQrVQXVWCJ/2SeIDxF6a5FA8exlTTBtuAJZawpgRrnTCma+JFIvdViPH0fNIDLU0IwXZMExK5Gw2u90g3z0O2kJqF1pyAduyKUqd2oSK/aBGgcKCMej5OnS6xfDYqZn+zawsfU58ohUJHWNsXvTtK8XMGKi/N7nBsPxBqgwrTBMwHKIzhWjhv6SquQnnGaNXbddaidImixNyIHsbpJiPAQZtT4RH3WfCasBOtYF5Xl1ZMs07MiGEe+grX3MjrenMe1MJyWEziZTKREaV8jOgVbJi0EjpGTYqDb/oC6paqL4MbpQxQiFD70n2gOjSAyyVWEPfIHKaVl4z+cQ== Administrator@LQN-PC</span><br></pre></td></tr></table></figure></p><p>复制key到authorized_keys 保存即可。<br>PS:如果服务端重装系统了 则需要清除本地公钥缓存 使用以下命令<br><code>ssh-keygen -R 111.230.24.31</code></p><ol><li><p>新建git仓库<br><code>cd /usr/local/wwh</code><br><code>mkdir GitLibrary</code><br><code>chmod -R 755 /data/GitLibrary</code></p></li><li><p>初始化<br><code>git init --bare hexo.git</code><br><code>vim /usr/local/wwh/GitLibrary/hexo.git/hooks/post-receive</code></p><p>添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/usr/local/wwh/hexo --git-dir=/usr/local/wwh/GitLibrary/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>保存并退出</p></li><li><p>给文件添加可执行权限<br><code>chmod +x /usr/local/wwh/GitLibrary/hexo.git/hooks/post-receive</code></p><blockquote><p>至此 git仓库配置完成。</p></blockquote></li></ol><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><blockquote><p>nginx安装目录在/etc/nginx,配置测试性配置来检查是否安装成功了。</p></blockquote><ol><li>在/usr/local/wwh下新建文件夹 <code>mkdir hexo</code></li><li><code>cd hexo</code> 新建index.html 文件 <code>vim index.html</code><br>文件内容如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;p&gt;Nginx running&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3.配置 Nginx 服务器<br><code>vim /etc/nginx/nginx.conf</code>    添加以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       80 default_server;</span><br><span class="line">      listen       [::]:80 default_server;</span><br><span class="line">      server_name   localhost</span><br><span class="line">      root         /usr/local/wwh/hexo;//地址为刚才新建hexo文件夹</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>4.启动Nginx 测试是否启动成功<br>输入命令： <code>systemctl start nginx.service</code><br>在没有配置系统启动Nginx的时候只能使用这种方式</p><p>5.访问IP<br>在浏览器输入IP地址：<a href="http://111.230.24.31/" target="_blank" rel="noopener">http://111.230.24.31/</a><br>会显示<code>Nginx running</code><br>表明Nginx启动成功。</p><h1 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h1><blockquote><p> hexo 客户端安装 配置等不说明,在另外一篇文章中已经提及过了</p></blockquote><p>1.修改nginx.conf 配置文件 <code>vim  /etc/nginx/nginx.conf</code></p><p>添加以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        root         /usr/local/wwh/hexo;</span><br><span class="line">      </span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ &#123;</span><br><span class="line">      expires 30d;</span><br><span class="line">      access_log off;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(eot|ttf|otf|woff|svg)$ &#123;</span><br><span class="line">    expires 30d;</span><br><span class="line">    access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(js|css)?$ &#123;</span><br><span class="line">    expires 7d;</span><br><span class="line">    access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>代码中location 可不添加，location的配置主要是用来做页面缓存,提高访问性能,避免页面加载太慢。</p></blockquote><p>重新启动nginx<br><code>systemctl restart nginx.service</code> </p><blockquote><p>nginx 配置完成</p></blockquote><p>2.hexo客户端配置</p><ul><li><p>修改hexo中_config.yml</p><p>修改deploy 参数,修改为以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">     github: git@github.com:wenthywang/wenthywang.github.io.git //部署到github</span><br><span class="line">     wwh: root@111.230.24.31:/usr/local/wwh/GitLibrary/hexo //部署到腾讯云服务器</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ul><ul><li>执行hexo部署命令</li></ul><p><code>hexo clean</code> //清除本地资源<br><code>hexo g -d</code> //生成静态文件 并部署到配置文件中git地址</p><blockquote><p>至此,hexo博客部署完毕。</p></blockquote><h1 id="为Nginx添加系统启动配置"><a href="#为Nginx添加系统启动配置" class="headerlink" title="为Nginx添加系统启动配置"></a>为Nginx添加系统启动配置</h1><ul><li><p>在/etc/init.d/目录下编写脚本，名为nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"> #!/bin/sh </span><br><span class="line"># </span><br><span class="line"># nginx - this script starts and stops the nginx daemon </span><br><span class="line"># </span><br><span class="line"># chkconfig:   - 85 15 </span><br><span class="line"># description: Nginx is an HTTP(S) server, HTTP(S) reverse \ </span><br><span class="line">#               proxy and IMAP/POP3 proxy server </span><br><span class="line"># processname: nginx </span><br><span class="line"># config:      /etc/nginx/nginx.conf </span><br><span class="line"># config:      /etc/sysconfig/nginx </span><br><span class="line"># pidfile:     /var/run/nginx.pid </span><br><span class="line"></span><br><span class="line"># Source function library. </span><br><span class="line">. /etc/rc.d/init.d/functions </span><br><span class="line"></span><br><span class="line"># Source networking configuration. </span><br><span class="line">. /etc/sysconfig/network </span><br><span class="line"></span><br><span class="line"># Check that networking is up. </span><br><span class="line">[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0 </span><br><span class="line"></span><br><span class="line">nginx=&quot;/usr/local/nginx/sbin/nginx&quot; </span><br><span class="line">prog=$(basename $nginx) </span><br><span class="line"></span><br><span class="line">NGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot; </span><br><span class="line"></span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx </span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/subsys/nginx </span><br><span class="line"></span><br><span class="line">start() &#123; </span><br><span class="line">    [ -x $nginx ] || exit 5 </span><br><span class="line">    [ -f $NGINX_CONF_FILE ] || exit 6 </span><br><span class="line">    echo -n $&quot;Starting $prog: &quot; </span><br><span class="line">    daemon $nginx -c $NGINX_CONF_FILE </span><br><span class="line">    retval=$? </span><br><span class="line">    echo </span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile </span><br><span class="line">    return $retval </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">stop() &#123; </span><br><span class="line">    echo -n $&quot;Stopping $prog: &quot; </span><br><span class="line">    killproc $prog -QUIT </span><br><span class="line">    retval=$? </span><br><span class="line">    echo </span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile </span><br><span class="line">    return $retval </span><br><span class="line">killall -9 nginx </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">restart() &#123; </span><br><span class="line">    configtest || return $? </span><br><span class="line">    stop </span><br><span class="line">    sleep 1 </span><br><span class="line">    start </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">reload() &#123; </span><br><span class="line">    configtest || return $? </span><br><span class="line">    echo -n $&quot;Reloading $prog: &quot; </span><br><span class="line">    killproc $nginx -HUP </span><br><span class="line">RETVAL=$? </span><br><span class="line">    echo </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">force_reload() &#123; </span><br><span class="line">    restart </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">configtest() &#123; </span><br><span class="line">$nginx -t -c $NGINX_CONF_FILE </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">rh_status() &#123; </span><br><span class="line">    status $prog </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">rh_status_q() &#123; </span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1 </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in </span><br><span class="line">    start) </span><br><span class="line">        rh_status_q &amp;&amp; exit 0 </span><br><span class="line">    $1 </span><br><span class="line">        ;; </span><br><span class="line">    stop) </span><br><span class="line">        rh_status_q || exit 0 </span><br><span class="line">        $1 </span><br><span class="line">        ;; </span><br><span class="line">    restart|configtest) </span><br><span class="line">        $1 </span><br><span class="line">        ;; </span><br><span class="line">    reload) </span><br><span class="line">        rh_status_q || exit 7 </span><br><span class="line">        $1 </span><br><span class="line">        ;; </span><br><span class="line">    force-reload) </span><br><span class="line">        force_reload </span><br><span class="line">        ;; </span><br><span class="line">    status) </span><br><span class="line">        rh_status </span><br><span class="line">        ;; </span><br><span class="line">    condrestart|try-restart) </span><br><span class="line">        rh_status_q || exit 0 </span><br><span class="line">            ;; </span><br><span class="line">    *)    </span><br><span class="line">      echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot; </span><br><span class="line">        exit 2 </span><br><span class="line"></span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><p>开启nginx服务<br><code>chmod 755 /etc/init.d/nginx</code><br><code>chkconfig --add nginx</code></p></li><li><p>nginx启动，停止<br><code>service nginx start</code>//启动nginx<br><code>service nginx stop</code>//停止nginx<br><code>service nginx restart</code>//重启nginx<br><code>service nginx reload</code>//修改配置后立马生效</p></li></ul><p>通过系统配置后,nginx可以使用service nginx *的方式来启动了。</p><h1 id="定时清除nginx日志"><a href="#定时清除nginx日志" class="headerlink" title="定时清除nginx日志"></a>定时清除nginx日志</h1><p>1.修改nginx日志地址<br><code>vim /etc/nginx/nginx.conf</code><br> 修改以下内容<br><code>error_log  /etc/nginx/logs/error.log warn;</code><br><code>access_log  /etc/nginx/logs/access.log  main;</code></p><p>2.重新启动nginx<br>因为重新加载配置不生效，需要重新启动nginx。<br><code>service nginx restart</code></p><p>3.添加定时任务（5天前的日志删除）<br><code>cd /etc/nginx</code><br><code>mkdir sh</code><br><code>cd sh</code><br><code>vim delete_nginx_logs.sh</code></p><p>添加以下代码</p><pre><code>#set the path to nginx log fileslog_files_path=&quot;/etc/nginx/logs/&quot;save_days=5#delete ? days ago nginx log filesfind $log_files_path -mtime +$save_days -exec rm -rf {} \;</code></pre><p>修改定时任务<br><code>crontab -e</code><br>添加以下代码 保存<br><code>00 00 * * * /bin/sh /etc/nginx/sh/delete_nginx_logs.sh</code><br>每天0点0分执行脚本</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>预览office</title>
      <link href="/2017/10/27/view_office/"/>
      <url>/2017/10/27/view_office/</url>
      <content type="html"><![CDATA[<h2 id="各处搜寻最佳方案"><a href="#各处搜寻最佳方案" class="headerlink" title="各处搜寻最佳方案"></a>各处搜寻最佳方案</h2><p>   项目中需要在线预览office文档的功能，因此在网络上搜寻大量资料。最终得到以下结论</p><ul><li><p>使用开源openoffice 需要搭建openoffice服务 解析office文档转成pdf 然后通过控制器响应pdf的格式输出文档        再显示到页面<br> 缺点是 ：效果不好 不推荐使用（简单的office文档或许还行）  </p></li><li><p>使用第三方在线预览API 这个需要付费 推荐qq邮箱使用的永中第三方<br>官网地址：<a href="http://dcs.yozosoft.com/" target="_blank" rel="noopener">http://dcs.yozosoft.com/</a><br>注册账号可使用免费试用次数 效果还是很满意的 并且似乎支持所有格式的文档 txt…</p></li></ul><ul><li><p>使用微软提供url来解析office文档<br>预览地址：<a href="https://products.office.com/zh-CN/office-online/view-office-documents-online" target="_blank" rel="noopener">https://products.office.com/zh-CN/office-online/view-office-documents-online</a><br>这种方式是最省钱 省时间 缺点是有大小限制 以及文档类型（只支持office文档word，excel，ppt）官网有写  还有 解析效果不能自定义 但是效果还是蛮不错的</p></li><li><p>总的来说，如果不缺钱就选用第二种，可联系第三方是否可自定义什么的，如果没钱，可选用第三种（前提是部署应用的服务器可外网访问），第一种是备选状态。<br>以上仅个人理解。</p></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 在线预览 </tag>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>百度文字识别API接入</title>
      <link href="/2017/07/04/Baidu_API/"/>
      <url>/2017/07/04/Baidu_API/</url>
      <content type="html"><![CDATA[<h2 id="First"><a href="#First" class="headerlink" title="First"></a>First</h2><p>  一个偶然的链接进去了百度的管理控制台，一扫而过的各种功能真是厉害了。然后看到文字识别，之前帮别人开发一个模拟登陆获取数据（有点像爬虫），有个很关键的点就是验证码了。想了想百度可以文字识别，验证码就不过也如此。</p><ul><li>注册百度账号</li><li>在文字识别添加一个应用</li><li>复制APPid和APPsecret</li><li>填写获取token的地址</li><li>发送请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String url = &quot;https://aip.baidubce.com/oauth/2.0/token&quot;;</span><br><span class="line">        JSONObject obj=new JSONObject();</span><br><span class="line">        obj.put(&quot;grant_type&quot;, &quot;client_credentials&quot;);</span><br><span class="line">        obj.put(&quot;client_id&quot;, &quot;XXX&quot;);</span><br><span class="line">        obj.put(&quot;client_secret&quot;, &quot;YYY&quot;);</span><br><span class="line">        String content=HttpUtil.post(url, &quot;json&quot;, obj.toJSONString(), null);</span><br></pre></td></tr></table></figure></li></ul><p>请求回来的数据是json字符串，解析一下就能获取token了。</p><h2 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h2><p>  获取了token之后就要真正让百度帮我识别验证码了。这时候需要用到百度的sdk，这个包也是在百度的文档中提供，下载之后导入工程即可。<br>  按照文档说，图片需要进行base64编码，还好sdk提供了工具类。</p><pre><code>String url=&quot;https://aip.baidubce.com/rest/2.0/ocr/v1/webimage?access_token=&quot;+access_token;     AipRequest r=new AipRequest();     String base64Img= Base64Util.encode( FileCopyUtils.copyToByteArray(file));     r.setUri(url);     r.addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);     HashMap&lt;String,Object&gt;params=new HashMap&lt;String,Object&gt;();     params.put(&quot;image&quot;, base64Img);     r.setBody(params);     AipResponse resp= AipHttpClient.post(r);     System.out.println(resp.getBodyStr());</code></pre><p>响应后的数据就是有识别的结果了，返回来的数据也是json串，需要进行解析。</p><h2 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h2><p> 看了下token的过期时间，是一个月，所以我就把token转成json文件保存在本机，就不需要每次都要请求获取token了，另外在获取token的时候需要判断是否已经过期了。刚尝试了接触过的两种验证码，较为复杂的，有干扰线的，需要去除掉，然后进行图像处理，再调用百度的API才能识别出来，另外一种是没有干扰线的，这个直接调用就出现结果，准确率估计能达到90%，这个还是很不错的，个人觉得如果有这种需求的话可以使用百度的API，虽然有些次数限制，并发限制，总体来说还是可以的，不过也可以付费放开所有限制。</p>]]></content>
      
      <categories>
          
          <category> 验证码识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度API </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring aop 初体验</title>
      <link href="/2017/06/28/springAOP/"/>
      <url>/2017/06/28/springAOP/</url>
      <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p><p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p><p>使用”横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p><h2 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h2><p>1、横切关注点</p><p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p><p>2、切面（aspect）</p><p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p><p>3、连接点（joinpoint）</p><p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p><p>4、切入点（pointcut）</p><p>对连接点进行拦截的定义</p><p>5、通知（advice）</p><p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p><p>6、目标对象</p><p>代理的目标对象</p><p>7、织入（weave）</p><p>将切面应用到目标对象并导致代理对象创建的过程</p><p>8、引入（introduction）</p><p>在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段</p><h2 id="Spring对AOP的支持"><a href="#Spring对AOP的支持" class="headerlink" title="Spring对AOP的支持"></a>Spring对AOP的支持</h2><p>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p><p>1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了</p><p>2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理，也可强制使用CGLIB</p><p>AOP的实现也不是难事，配置下文件（可用注解），可分3步。</p><p>1、定义普通业务组件</p><p>2、定义切入点，一个切入点可能横切多个业务组件</p><p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p><p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法=增强处理+被代理对象的方法。</p><p>eg:aop.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</span><br><span class="line">            </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h2 id="基于Spring的AOP简单实现"><a href="#基于Spring的AOP简单实现" class="headerlink" title="基于Spring的AOP简单实现"></a>基于Spring的AOP简单实现</h2><p>需要额外下载以下两个jar</p><p>1、aopalliance.jar</p><p>2、aspectjweaver.jar</p><p>xml实现方式，注解方式就不多说了。</p><ul><li><p>声明接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface HelloWorld</span><br><span class="line">&#123;</span><br><span class="line">    void printHelloWorld();</span><br><span class="line">    void doPrint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加接口实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorldImpl implements HelloWorld</span><br><span class="line">&#123;</span><br><span class="line">    public void printHelloWorld()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;Enter HelloWorldImpl.printHelloWorld()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void doPrint()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;Enter HelloWorldImpl.doPrint()&quot;);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>横切关注点，这里是打印时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class TimeHandler</span><br><span class="line">&#123;</span><br><span class="line">    public void printTime()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;CurrentTime = &quot; + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>-aop.xml配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;bean id=&quot;helloWorldImpl&quot; class=&quot;com.xrq.aop.HelloWorldImpl&quot; /&gt;</span><br><span class="line">     </span><br><span class="line">        &lt;bean id=&quot;timeHandler&quot; class=&quot;com.xrq.aop.TimeHandler&quot; /&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;aop:config&gt;</span><br><span class="line">            &lt;aop:aspect id=&quot;time&quot; ref=&quot;timeHandler&quot;&gt;</span><br><span class="line">                &lt;aop:pointcut id=&quot;addAllMethod&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.*(..))&quot; /&gt;</span><br><span class="line">                &lt;aop:before method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</span><br><span class="line">                &lt;aop:after method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</span><br><span class="line">            &lt;/aop:aspect&gt;</span><br><span class="line">        &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><ul><li><p>main 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">&#123;</span><br><span class="line">    ApplicationContext ctx = </span><br><span class="line">            new ClassPathXmlApplicationContext(&quot;aop.xml&quot;);</span><br><span class="line">        </span><br><span class="line">    HelloWorld hw1 = (HelloWorld)ctx.getBean(&quot;helloWorldImpl&quot;);</span><br><span class="line">   </span><br><span class="line">    hw1.printHelloWorld();</span><br><span class="line">    System.out.println();</span><br><span class="line">    hw1.doPrint();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CurrentTime = 1446129611993</span><br><span class="line">Enter HelloWorldImpl.printHelloWorld()</span><br><span class="line">CurrentTime = 1446129611993</span><br><span class="line"></span><br><span class="line">CurrentTime = 1446129611994</span><br><span class="line">Enter HelloWorldImpl.doPrint()</span><br><span class="line">CurrentTime = 1446129611994</span><br></pre></td></tr></table></figure></li><li><p>总结<br> 很不好意思地从度娘那拷过来的，暂时对aop的理解还没有这么深刻，但是使用过之后已经有了进一步的了解，然后再通过这篇博文发现对aop更加了解。以后对于一些能用aop方式解决的问题，还是用aop。<br> 总得来讲，现在公司的所有模块都几乎没有用aop，这是有很大的优化空间啊，因为看到一堆重复的代码，真叫人费解。</p></li></ul>]]></content>
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux下elasticsearch插件安装笔记(head,sql)</title>
      <link href="/2017/05/04/elasticsearch_4/"/>
      <url>/2017/05/04/elasticsearch_4/</url>
      <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p> 这里的版本是es5.1.2，不适用5.x以下，5.x以下是用插件的形式安装在es上面，具体看git。<br> 安装的目录，和解压的目录都可以随便选的，但是为了统一管理，最好全部插件安装在es的根目录下（个人建议），因为我这里此前有人安装过相关的插件，分散在不同的目录，搞起来让我很懵逼。</p><h2 id="elasticsearch-head"><a href="#elasticsearch-head" class="headerlink" title="elasticsearch-head"></a>elasticsearch-head</h2><p>github链接 <strong><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">elasticsearch-head</a></strong><br> head 插件在window安装跟linux安装操作步骤基本相似，这里就介绍linux下安装即可。<br>1.首先需要git clone head 插件到本地，在linux上使用git命令也行，下载到本地再上传到linux服务器也行，哪方便行。<br>2.安装npm：<br>使用国外镜像会比较慢，所以使用淘宝镜像，很快的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.4.7-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p><p>3.解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf node-v4.4.7-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p><p>4.设置环境变量：<strong>这个步骤很重要<strong>,直接影响到npm安装是否正确<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/opt/node-v4.4.7-linux-x64/bin</span><br></pre></td></tr></table></figure></strong></strong></p><p>  这个opt是刚才解压的目录，这个一定不要错。<br>5.查看npm版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p> 看下有没有版本号，有的话就没问题了。没有的话应该是环境变量出问题了，先看下当前环境变量</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p> 有上一步的安装目录的话，就没有问题了，这时候需要你重新设置环境变量</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=把刚才path的值拷贝过来就可以了</span><br></pre></td></tr></table></figure><p>然后重新npm -v 看下，如果还是不行，建议重新安装npm。  </p><p>另外还有一个很奇葩的东西，不知道是不是linux自带了node，会导致环境变量有问题，如果发现自带的node，请务必要删掉，然后重新设置PATH。  </p><p>另外装完npm之后可以装n插件，这个插件可以更新最新版本的node，具体详情可以bing一下。</p><p>6.在head插件根目录下安装npm和grunt插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install  cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">npm install  grunt–cli</span><br></pre></td></tr></table></figure><p>7.修改Elasticsearch配置文件</p><p>编辑elasticsearch-5.1.1/config/elasticsearch.yml,加入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure><p>8.修改Gruntfile.js<br>打开elasticsearch-head-master/Gruntfile.js，找到下面connect属性，新增hostname: ‘0.0.0.0’,同时里面的port参数是对应的端口号，访问的时候就是这个端口号了，按需配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">connect: &#123;</span><br><span class="line">        server: &#123;</span><br><span class="line">            options: &#123;</span><br><span class="line">                hostname: &apos;0.0.0.0&apos;,</span><br><span class="line">                port: 9100,</span><br><span class="line">                base: &apos;.&apos;,</span><br><span class="line">                keepalive: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>9.启动elasticsearch-head<br>在elasticsearch-head-master/目录下，运行启动命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt server</span><br></pre></td></tr></table></figure><p>这个操作可能会出现异常，提示插件找不到，所以要找到elasticsearch-head-master/目录下的package.json里面最后的”devDependencies”参数，安装需要的插件包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 插件名@版本号</span><br></pre></td></tr></table></figure><p>安装完再启动就好了。</p><p>10.后台启动elasticsearch-head</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup grunt server &amp;exit</span><br></pre></td></tr></table></figure><p>如果想关闭head插件，使用Linux查找进程命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep head</span><br></pre></td></tr></table></figure><p>结束进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 进程号</span><br></pre></td></tr></table></figure><p>至此，head插件已成功安装。<br><img src="/img/head.png" alt="head">  </p><h2 id="elasticsearch-sql"><a href="#elasticsearch-sql" class="headerlink" title="elasticsearch-sql"></a>elasticsearch-sql</h2><p> github链接 <strong><a href="https://github.com/NLPchina/elasticsearch-sql" target="_blank" rel="noopener">elasticsearch-sql</a></strong><br>由于上面已经安装好整个环境了，就不需要再安装了，如果是反过来装的话，也要先装npm才行。</p><blockquote><p>1.下载es-sql-site压缩包[<a href="https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。" target="_blank" rel="noopener">https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。</a><br>2.切换到解压目录，并安装express插件，同时部署node服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd site-server</span><br><span class="line">npm install express --save</span><br><span class="line">node node-server.js</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>至此sql插件已成功安装,同样如果需要后台运行，需要使用nohup命令执行。<br>另外sql端口号的配置在es-sql-site\site-server目录下的site_configuration.json文件中配置。<br><img src="/img/sql.png" alt="sql">  </p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>   插件安装可能比较繁琐，特别是npm的安装，需要耐心。另外配置链接的地址可以写死在js里面<br><img src="/img/link1.png" alt="link1">  </p><blockquote><p>这个的链接配置在head-master目录下elasticsearch-head-master_site\app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line 4327 &quot;http://localhost:9200&quot; -&gt;&quot;http://172.16.54.74:19200&quot;</span><br></pre></td></tr></table></figure></p></blockquote><p>配置成启动的es的ip和端口即可</p><p><img src="/img/link2.png" alt="link2">  </p><blockquote><p>这个的链接配置在head-master目录下es-sql-site_site\controller.js</p></blockquote><pre><code>line 387    url = &quot;http://localhost:9200&quot;-&gt;&quot;http://172.16.54.74:19200&quot;line 390    url = location.protocol+&apos;//&apos; + location.hostname + (location.port ? &apos;:&apos;+location.port : &apos;&apos;)-&gt;&quot;http://172.16.54.74:19200&quot;</code></pre><p>都改成启动的es的ip和端口即可，这样子就不需要每次打开插件都填写对应的ip和port了。</p>]]></content>
      
      <categories>
          
          <category> elasticsearch </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch插件 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>elasticsearch-sql-5.1.2笔记</title>
      <link href="/2017/03/27/elasticsearch_3/"/>
      <url>/2017/03/27/elasticsearch_3/</url>
      <content type="html"><![CDATA[<h2 id="elasticsearch-sql-5-1-2"><a href="#elasticsearch-sql-5-1-2" class="headerlink" title="elasticsearch-sql-5.1.2"></a>elasticsearch-sql-5.1.2</h2><p><strong><a href="https://github.com/NLPchina/elasticsearch-sql" target="_blank" rel="noopener">elasticsearch-sql</a></strong></p><blockquote><p>ElasticSearch-sql 是es的插件之一，通过类sql查询es。最近更新了最新的5.1.2版本，出现某些异常情况。使用groupby的时候查询的时候只有10条，出现这个问题，尝试了在issue找答案，找到了发送请求的时候要设置size的大小，而sql插件源码包里面写死了200和10，至于怎么找出来的，我也是在别人的博客里面看到的，<strong><a href="http://blog.csdn.net/wangyang_software/article/details/51791573" target="_blank" rel="noopener">blog</a></strong>。因此，通过修改源码重新打包即可解决我的问题（源码包就跟打好的jar包放一起，名字也写上了source，多贴心），修改两个位置,如下<br>line 76:这个位置是最后一次查询条数，改成Integer.MAX_VALUE。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(select.getRowCount()&gt;0) &#123;</span><br><span class="line">                  ((TermsAggregationBuilder) lastAgg).size(Integer.MAX_VALUE);</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>line 109:这个位置是重点，每次的子查询都要设置size，改成Integer.MAX_VALUE。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AggregationBuilder subAgg = getGroupAgg(field, select);</span><br><span class="line">                  //ES5.0 termsaggregation with size = 0 not supported anymore</span><br><span class="line">                if (subAgg instanceof TermsAggregationBuilder &amp;&amp; !(field instanceof MethodField)) &#123;</span><br><span class="line">                    ((TermsAggregationBuilder) subAgg).size(Integer.MAX_VALUE);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure></p><p>里面注释也有说到，5.0以上已经不支持size为0的设置，所以要设置值，不设置的话默认是10。这个问题在线上已经出现了，先准备升级修复这个问题。另外，如果数据超出了Integer.MAX_VALUE，则需要加上更多的过滤条件，似乎超过了查询就会出问题了，这个问题并没有深究。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>找这个问题的过程虽然艰辛，学习的过程让我很快乐，同时我也在es讨论网站也发出相关问题，跟相关的es使用者一起讨论，得到他们的回答，我也是想当开心的。Anyaway ，发现看源码真的让自己学习了很多。<strong><a href="https://discuss.elastic.co/top/all" target="_blank" rel="noopener">discuss.elastic.co</a></strong></p></blockquote>]]></content>
      
      <categories>
          
          <category> elasticsearch </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch-sql </tag>
            
            <tag> group_by </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>elasticsearch 笔记-插件</title>
      <link href="/2016/12/30/elasticsearch_2/"/>
      <url>/2016/12/30/elasticsearch_2/</url>
      <content type="html"><![CDATA[<h2 id="delete-by-query插件使用"><a href="#delete-by-query插件使用" class="headerlink" title="delete-by-query插件使用"></a>delete-by-query插件使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TransportClient.builder().settings(settings).addPlugin(DeleteByQueryPlugin.class).build();</span><br></pre></td></tr></table></figure><p>deleteByQuery插件是通过按照查询出来的doc 来进行删除操作。</p><ul><li>es的集群都需要安装deleteByQuery 插件，到es的安装目录里执行plugin install deletebyQuery命令则可安装</li><li>es安装完需要重启，重新加载插件</li><li>客户端创建时需要添加plugin的支持如上面代码</li><li>eg：  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * es 查询删除操作</span><br><span class="line"> * @param index 索引</span><br><span class="line"> * @param type 类型</span><br><span class="line"> * @param column 删除字段的列名</span><br><span class="line"> * @param deleteValue 删除字段值</span><br><span class="line"> * @return long 删除结果</span><br><span class="line"> */</span><br><span class="line">    public  long deleteByQuery (String index,String type,String column,String deleteValue) &#123;</span><br><span class="line">        String deleteByQuery=&quot;&#123;\&quot;query\&quot;:&#123;\&quot;bool\&quot;:&#123;\&quot;must\&quot;:[&#123;\&quot;term\&quot;:&#123;\&quot;&quot;+column+&quot;\&quot;:\&quot;&quot;+deleteValue+&quot;\&quot;&#125;&#125;]&#125;&#125;&#125;&quot;;</span><br><span class="line">        LOG.info(&quot;[EsJdbcDaoSupport.deleteByQuery] request json-&gt; &quot;+deleteByQuery);</span><br><span class="line">        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(EsConnectionFactory.transportClient,   </span><br><span class="line">                                          DeleteByQueryAction.INSTANCE)</span><br><span class="line">                                          .setIndices(index)</span><br><span class="line">                                          .setTypes(type)</span><br><span class="line">                                          .setSource(deleteByQuery)</span><br><span class="line">                                          .execute()</span><br><span class="line">                                          .actionGet();  </span><br><span class="line">        return response.getTotalFound();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这种方式是通过拼装请求json 来获得查询条件，然后es发送json查询。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 查询es记录</span><br><span class="line"> * </span><br><span class="line"> * @param index 数据库</span><br><span class="line"> * @param type 表</span><br><span class="line"> * @param dataMap 字段对应的数据</span><br><span class="line"> * @return  boolean</span><br><span class="line"> */</span><br><span class="line">public  long delete (String index,String type,String deleteId) &#123;</span><br><span class="line">    TransportClient client =EsConnectionFactory.createEsClient();</span><br><span class="line">    DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(client,   </span><br><span class="line">                                      DeleteByQueryAction.INSTANCE)</span><br><span class="line">                                      .setIndices(index)</span><br><span class="line">                                      .setTypes(type)</span><br><span class="line">                                     .setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;QS_ENTERPRISE_ID&quot;, deleteId)))</span><br><span class="line">                                      .execute()</span><br><span class="line">                                      .actionGet();  </span><br><span class="line">    return response.getTotalFound();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是通过原生es的查询查询数据，两种效果一样，不过我还是比较喜欢第二种。第一种可以动态生成查询条件，第二种动态生成好像是不行。</p><h2 id="update-by-query-插件使用"><a href="#update-by-query-插件使用" class="headerlink" title="update-by-query 插件使用"></a>update-by-query 插件使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TransportClient.builder().settings(settings).addPlugin(ReindexPlugin.class).build();</span><br></pre></td></tr></table></figure><ul><li>update-by-query插件是通过按照查询出来的doc 来进行更新操作，主要原理应该是：es不支持直接操作es单条记录，所以要把更新的记录拿出来，然后删除原来的，把更新后插入进去。</li><li>es 不需要安装，不需要重启</li><li>工程中添加reindex.jar，jar包在下载es里面的lib中可以找到</li><li>客户端创建时需要添加plugin的支持如上面代码</li><li>eg：  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UpdateByQueryRequestBuilder ubqrb=UpdateByQueryAction.INSTANCE.newRequestBuilder(client);</span><br><span class="line">BulkIndexByScrollResponse r=ubqrb.source(INDEX_ST_SESSION_TAG_SDR)</span><br><span class="line">                      .script(new Script(&quot;[ctx._source.ST_TAG_ID2=0,ctx._source.ST_TAG_ID3=0]&quot;))</span><br><span class="line">                      .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;ST_ENTERPRISE_ID&quot;, orgName)))</span><br><span class="line">                     .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;ST_TAG_ID2&quot;, tagid)))</span><br><span class="line">                     .get();</span><br></pre></td></tr></table></figure><p>update-by-query 的难点在于一开始的script的写法，一开始不懂如何写script，后来看了各种文档api，才发现ctx.source是最重要的一个参数。后面的才是es的对应的列名（mapping），个人感觉ctx代表了所有数据的所有属性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过学习两种插件的使用，更加了解了es的运作，现在用的是2.4.1的版本。没有升级，好像5的版本已经自带插件了，不需要再手动添加插件了。不过，还是觉得es配合sql的操作还是不让人放心。复杂的业务操作还是用原生的es，不需要用sql插件，不然会出现一些不可预知的情况。</p>]]></content>
      
      <categories>
          
          <category> elasticsearch </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> elasticsearch-插件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>csv 笔记</title>
      <link href="/2016/12/02/common-csv/"/>
      <url>/2016/12/02/common-csv/</url>
      <content type="html"><![CDATA[<h2 id="csv初使用"><a href="#csv初使用" class="headerlink" title="csv初使用"></a>csv初使用</h2><p>COMMON-CSV<strong><a href="http://commons.apache.org/proper/commons-csv/" target="_blank" rel="noopener">官网</a></strong></p><blockquote><p>项目中批量插入数据库使用的mybatis，在做数据导入的时候，觉得是mybatis的批量导入有问题，后来发现其实是没问题的。当时没看时间花费多少，就找到了common-csv来做测试，在知乎上也有很多人说用csv配合load data会很快，后来测试之后，其实感觉是差不多的，我的数据量是1000左右，可能在1w以上的数据就会出现差异，load data 这个东西感觉是效率很高，使用起来也是很方便，在项目中引用common-csv的jar包即可</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>mybatis xml 文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;createOrdersByCsv&quot;   &gt;</span><br><span class="line">    LOAD  DATA LOCAL INFILE #&#123;filePath&#125;</span><br><span class="line">   INTO TABLE wo_work_order_test</span><br><span class="line">   FIELDS   TERMINATED BY &apos;,&apos;</span><br><span class="line">      lines terminated by &apos;\r\n&apos;</span><br><span class="line">(ID, ENTERPRISE_ID, ORDER_NO,CUSTOMER_ID,</span><br><span class="line">STATUS,PRIORITY,SUBJECT,CONTENT,SOURCE,WORKGROUP,AGENT,IS_DELETE,</span><br><span class="line">STRATEGY,HAS_FILES,DISPATCH_STATUS,BATCH_NO,CREATE_TIME,</span><br><span class="line">UPDATE_TIME,OVER_TIME,HANDING_OVER_TIME,OVER_TIME_FLAG,</span><br><span class="line">HANDING_OVER_TIME_FLAG,WG_RECEIVE_TIME,AG_RECEIVE_TIME);</span><br><span class="line">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure></li><li><p>java 代码生成csv文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 通过Csv文件导入mySql数据库</span><br><span class="line">     * @param entities 实体list</span><br><span class="line">     * @return boolean 导入结果</span><br><span class="line">     */</span><br><span class="line">    private boolean createOrdersByCsv(List&lt;OrderEntity&gt;entities)&#123;</span><br><span class="line">        boolean result=false;</span><br><span class="line">        String filename = &quot;/usr/local/jiaxin_gw_container-1.0/tmp/&quot;+TimeUtils.getCurrentTimeStamp()+&quot;orders-tmp.csv&quot;;</span><br><span class="line">        try &#123;     </span><br><span class="line">        CSVFormat csvFileFormat = CSVFormat.RFC4180.withRecordSeparator(&quot;\n&quot;);// 创建CSVFormat</span><br><span class="line"></span><br><span class="line">        OutputStreamWriter write = new OutputStreamWriter(new FileOutputStream(filename),&quot;UTF-8&quot;);</span><br><span class="line">        BufferedWriter bufferedWriter = new BufferedWriter(write);</span><br><span class="line">        CSVPrinter csvFilePrinter = new CSVPrinter(bufferedWriter, csvFileFormat);</span><br><span class="line">        StringBuilder recordStr = new StringBuilder();</span><br><span class="line"></span><br><span class="line">        for (OrderEntity entity : entities) &#123;</span><br><span class="line">            recordStr.append(entity.getID() + &quot;,&quot;);</span><br><span class="line">            recordStr.append(entity.getEnterpriseID() + &quot;,&quot;);</span><br><span class="line">            recordStr.append(entity.getOrderNo() + &quot;,&quot;);</span><br><span class="line">            if(entity.getCustomerJID()==null)&#123;</span><br><span class="line">                recordStr.append(&quot;\\N&quot; + &quot;,&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                recordStr.append(entity.getCustomerJID() + &quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            recordStr.append(entity.getStatus() + &quot;,&quot;);</span><br><span class="line">            recordStr.append(entity.getPriority() + &quot;,&quot;);</span><br><span class="line">            if(entity.getSubject()==null)&#123;</span><br><span class="line">                recordStr.append(&quot;\\N&quot;+ &quot;,&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                recordStr.append(entity.getSubject() + &quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        if(entity.getDescription()==null)&#123;</span><br><span class="line">            recordStr.append(&quot;\\N&quot; + &quot;,&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            recordStr.append(entity.getDescription() + &quot;,&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">            recordStr.append(entity.getSource() + &quot;,&quot;);</span><br><span class="line"></span><br><span class="line">            if(entity.getAcceptWkgroupJID()==null)&#123;</span><br><span class="line">                recordStr.append( &quot;\\N&quot;+ &quot;,&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                recordStr.append(entity.getAcceptWkgroupJID()+ &quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            if(entity.getAcceptAgentJID()==null)&#123;</span><br><span class="line">                recordStr.append(&quot;\\N&quot;+ &quot;,&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                recordStr.append(entity.getAcceptAgentJID() + &quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            recordStr.append(entity.getIsDelete() + &quot;,&quot;);</span><br><span class="line">            recordStr.append(entity.getDispatchStrategy() + &quot;,&quot;);</span><br><span class="line">            recordStr.append(entity.getHasAttach()+ &quot;,&quot;);</span><br><span class="line">            recordStr.append(entity.getDispatchStatus()+ &quot;,&quot;);</span><br><span class="line">            </span><br><span class="line">            recordStr.append(entity.getBatchNo()+ &quot;,&quot;);</span><br><span class="line">            recordStr.append(entity.getCreateTime()+ &quot;,&quot;);</span><br><span class="line">            recordStr.append(entity.getUpdateTime()+ &quot;,&quot;);</span><br><span class="line">            if(entity.getTimeoutTime()==null)&#123;</span><br><span class="line">                recordStr.append(&quot;\\N&quot;+ &quot;,&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                recordStr.append(entity.getTimeoutTime()+ &quot;,&quot;); </span><br><span class="line">            &#125;</span><br><span class="line">        if(entity.getHandingOverTime()==null)&#123;</span><br><span class="line">            recordStr.append(&quot;\\N&quot;+ &quot;,&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            recordStr.append(entity.getHandingOverTime()+ &quot;,&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">            recordStr.append(entity.getOverTimeFlag()+ &quot;,&quot;);</span><br><span class="line">            recordStr.append(entity.getHandingOverTimeFlag());</span><br><span class="line">            recordStr.append(&quot;\r\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">                 recordStr.deleteCharAt(0);  </span><br><span class="line">                recordStr.deleteCharAt(recordStr.length()-1);  </span><br><span class="line">                csvFilePrinter.printRecord(recordStr.toString());  </span><br><span class="line">                recordStr.delete(0, recordStr.length()-1);  </span><br><span class="line">                csvFilePrinter.close();</span><br><span class="line">        orderDao.createOrdersByCsv(filename);</span><br><span class="line">        result=true;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>上面的\N是null的String插入到mysql为null，如果不使用\N，插入到数据库就是null的字符串，显然不对。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 在使用过程中，生成csv文件中，产生的头尾双引号，还没有找到解决方法，所以导致插入数据库是有双引号的。<br> 需要在api文档中找寻相关解决方法。这是一个问题。<br> 还有就是分隔符的问题，导入的数据要是比较正常的数据还好，如果出现跟分割符相同的数据，会直接导致插入的数据90%的错误，这个是很严重的问题，所以用的时候要注意。</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csv </tag>
            
            <tag> myslq </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Future Callable 初使用</title>
      <link href="/2016/11/19/Future_Use/"/>
      <url>/2016/11/19/Future_Use/</url>
      <content type="html"><![CDATA[<h2 id="线程优化"><a href="#线程优化" class="headerlink" title="线程优化"></a>线程优化</h2><p>  昨天看到一同事的导出代码，单线程，看着就觉得还是差了点东西。然后就想进行一番改造，然后就找来了future和callable。<br>  <strong><br>      Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被Future拿到，也就是说，Future可以拿到异步执行任务的返回值。  </strong></p><p>  简单来说就是一个是执行任务，然后它带着任务执行的结果回来。</p><h3 id="简单看下下面的demo"><a href="#简单看下下面的demo" class="headerlink" title="简单看下下面的demo"></a>简单看下下面的demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.concurrent.Callable;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line">public class demo&#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">        ArrayList&lt;Future&lt;Integer&gt;&gt; resultList = new ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        //创建并提交任务1</span><br><span class="line">        AddNumberTask task1 = new AddNumberTask(1, 5000);</span><br><span class="line">        Future&lt;Integer&gt; future1 = executor.submit(task1);</span><br><span class="line">        resultList.add(future1);</span><br><span class="line">        </span><br><span class="line">        //创建并提交任务2</span><br><span class="line">        AddNumberTask task2 = new AddNumberTask(5001, 10000);</span><br><span class="line">        Future&lt;Integer&gt; future2 = executor.submit(task2);</span><br><span class="line">        resultList.add(future2);</span><br><span class="line">        </span><br><span class="line">        executor.shutdown();</span><br><span class="line">        </span><br><span class="line">        int total = 0;</span><br><span class="line">        </span><br><span class="line">        for(Future&lt;Integer&gt; future : resultList)&#123;</span><br><span class="line">            while(true)&#123;</span><br><span class="line">                if(future.isDone() &amp;&amp; !future.isCancelled())&#123;</span><br><span class="line">                    int sum = future.get();</span><br><span class="line">                    total += sum;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    Thread.sleep(100);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;total sum is &quot; + total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AddNumberTask implements Callable&lt;Integer&gt;&#123;</span><br><span class="line">    private int start;</span><br><span class="line">    private int end;</span><br><span class="line">    </span><br><span class="line">    public AddNumberTask(int start, int end) &#123;</span><br><span class="line">        // TODO Auto-generated constructor stub</span><br><span class="line">        this.start = start;</span><br><span class="line">        this.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Integer call() throws Exception &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int totalSum = 0;</span><br><span class="line">        </span><br><span class="line">        for(int i = start; i &lt;= end; i++)&#123;</span><br><span class="line">            totalSum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Thread.sleep(5000);</span><br><span class="line">        </span><br><span class="line">        return totalSum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>参考了这个例子，我就改造了导出的那段代码，1w2数据从原来的6-8s 到现在的2-3s，虽然不是很多，但是也是一大进步，后来想了下，时间其实就花在了查询的sql，如果sql 再继续优化下去的的话应该可以突破到1s执行返回的。但因为还有新需求要进行，我就不再细究下去了。</p></li><li><p>改造的时候，同样我也是根据查询的数据量来新建任务执行，使用了for循环，本来公司已经提供了线程池fixedPool(100)的，我就不用自己再创建了。</p></li></ul><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><ul><li>future 没有表示返回来的这堆数据是谁的<br>于是我就对返回变量进行了修改，返回一个map，标识这个数据是我的，后面根据map的key获取数据。</li><li>size 数据量的大小影响任务的执行<br>查询数据使用了limit 字段每次查询1000 2000 3000 500 这几个size 都试过，似乎值越大越好，一次查询数据量比多次查询数据量效率要高。因为3000恐怕生产环境的数据会比较多，后来我就改成了2000。  </li><li>mysql 索引 不合理<br>索引建不好，导致查询sql也是很慢的，查询的那个表使用了多列索引，问题就出在这了，使用sql的执行计划看了下，查询的字段虽然有索引但是没有使用到，因为多列索引的第一个不是我的查询字段，导致查询效率会有小小的降低，我也没跟负责人说，毕竟也不是很大的问题，差的时间不是很多。</li></ul>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Future </tag>
            
            <tag> excel导出 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>next部署git页面资源加载404</title>
      <link href="/2016/11/18/next/"/>
      <url>/2016/11/18/next/</url>
      <content type="html"><![CDATA[<h2 id="资源404"><a href="#资源404" class="headerlink" title="资源404"></a>资源404</h2><ul><li>引用一下其他博主的话，这位博主不要生气哦，资源共享嘛<br><strong> 最近github page更新了，GitHub Pages 过滤掉了 source/vendors 目录的访问，所以next主题下的source下的vendors目录不能够被访问到，所以就出现了本地hexo s能够正常访问，但是deploy到github就是一片空白，按f12，可以看到大量来自source/vendors的css和js提示404 </strong></li></ul><p><img src="/img/404.png" alt="404">  </p><ul><li><p>这两天推送git的时候发现，推送hexo成功，但是在github上面打开就报了一堆404找不到资源的情况。所有的配置都已经配置好的，跟以前没有什么区别，然后自己再反复找下是不是hexo的问题，然后就重新装了hexo。发现问题还是存在，于是就度娘了一下，原来最近真的有这样情况，然后next的博主也在git上面解决了这个bug，详情请看<a href="https://github.com/iissnan/hexo-theme-next/issues/1214" title="issues" target="_blank" rel="noopener">资源加载失败</a>，原来是有个jekyll的东西改了，导致不能加载这些资源。</p></li><li><p>看到比较快的解决方法，亲测成功，因为我把博主的master的git删掉了，我在想当初我怎么这么手贱啊。同时我也改了挺多博主的东西，免得冲突了。听说博主更新了很多东西，最近实在是太忙了，没有去研究博主的新东西。我还是很喜欢next 这个主题的。更好的方法应该是直接更新博主的next master了。</p></li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>参考: issue: #1220</li><li>步骤:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.deploy_git 目录, 添加 .nojekyll 空文件</span><br><span class="line">source目录, 添加.nojekyll 空文件</span><br><span class="line">修改 Hexo 上层_config.yml配置文件, 添加</span><br><span class="line">include:</span><br><span class="line">  - .nojekyll</span><br><span class="line">重新部署推送: hexo d -g</span><br></pre></td></tr></table></figure></li></ul><h2 id="同时出现的问题"><a href="#同时出现的问题" class="headerlink" title="同时出现的问题"></a>同时出现的问题</h2><ul><li><p>添加以上内容的时候，还发现win10直接添加.xx的文件是不行。后来想到绝招，使用git bash 添加文件，真是无所不能。git base的命令跟linux的命令几乎一样，所以一下就建好了。新建文件命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .nojekyll</span><br></pre></td></tr></table></figure></li><li><p>这个bug 就解决到这了。嘻嘻</p></li></ul>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>elasticsearch 笔记</title>
      <link href="/2016/11/18/elasticsearch_1/"/>
      <url>/2016/11/18/elasticsearch_1/</url>
      <content type="html"><![CDATA[<h2 id="初学elasticsearch"><a href="#初学elasticsearch" class="headerlink" title="初学elasticsearch"></a>初学elasticsearch</h2><p>elasticsearch，简称ES。<strong><a href="http://baike.baidu.com/link?url=dbviqnoOFYZYYSxYswZubLVUk-7WFiuR9tLb-DOC0sv0pHRHEkfsSw0--EdarpYBLdaqrAPw9YPHYl0mQA6TxoIMUIj7i3NDVMtGCKsjxYG" target="_blank" rel="noopener">百度百科</a></strong></p><blockquote><p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。<br>我们建立一个网站或应用程序，并要添加搜索功能，令我们受打击的是：搜索工作是很难的。我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一&gt; 个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。</p></blockquote><h3 id="elasticsearch-安装"><a href="#elasticsearch-安装" class="headerlink" title="elasticsearch 安装"></a>elasticsearch 安装</h3><ul><li>安装elasticsearch简单，容易。我使用的es是2.4.1版本的，<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">elasticsearch下载</a>。另外Java也是必须的，最好是1.7以上的版本，我用的是1.7的java版本的。</li><li><p>下载好之后，打开根目录下的bin目录下的elasticsearch.bat，如下：<br><img src="/img/es1.png" alt="打开bat"><img src="/img/es2.png" alt="打开bat"><br>其实就是本地开了服务，跟web工程差不多。</p></li><li><p>打开之后，就可以本地玩耍了。es默认使用9200，9300端口的，详细配置可以参考官方文档，也可以自己参详参详。在浏览器上输入<code>localhost：9200</code> 可见配置信息，以及开启信息，如下图：<br><img src="/img/es3.png" alt="打开bat"></p></li></ul><h3 id="elasticsearch插件安装"><a href="#elasticsearch插件安装" class="headerlink" title="elasticsearch插件安装"></a>elasticsearch插件安装</h3><ul><li>es有两个插件，一个是head的插件，可以看到es的集群状态。一个是sql插件，可以用类似sql的语句查询数据。具体的安装可以百度或者google查找哦。</li></ul><h3 id="强大的Elasticsearch-sql"><a href="#强大的Elasticsearch-sql" class="headerlink" title="强大的Elasticsearch-sql"></a>强大的Elasticsearch-sql</h3><ul><li>Elasticsearch-sql是一个强大的插件，界面上可以用sql查询，代码上可以用sql执行sql语句，相对于es的原生态，我还是比较喜欢这种sql开发的，因为一开始我是使用原生态的查询聚合查询，写得也DT的。后来加了sql插件，开发效率都提高了不少，但是使用起来也是有一定的限制。</li><li>group by 后面的字段不能为空</li><li>字段类型需要groupby的需要设置not_analyzed 保证这个字段不分析，当出现一些特殊字符的时候，不加的话es会默认使用分析，分词功能，就达不到要的效果，当时也是纠结了好久才发现的。</li><li>创建es链接麻烦，每次查询需要创建链接，没有连接池，虽然后面用了druid连接，似乎会出问题。</li><li>es put连接创建一次就好了，后来就使用了类加载，一次连接即可，减少多次连接造成的消耗。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><pre><code>使用还是很方便的，特别是用sql。不过对于业务复杂的似乎不怎么样，另外同时使用redis做缓存是最好不过了。查询效率是很高，后期维护也是需要挺高的成本的。总体来说实时性还是挺强的，苦逼的我现在还在加班...之前写了一半，今天就写完它吧，也是写得很急，有什么要交流的可以留言。或者加微信详聊哦。</code></pre>]]></content>
      
      <categories>
          
          <category> elasticsearch </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>maven mirror修改 国内镜像</title>
      <link href="/2016/11/02/maven_mirror/"/>
      <url>/2016/11/02/maven_mirror/</url>
      <content type="html"><![CDATA[<h2 id="修改setting-xml"><a href="#修改setting-xml" class="headerlink" title="修改setting.xml"></a>修改setting.xml</h2><p> setting.xml是工程所用的maven的setting.xml,可存在maven安装目录的conf下，或者在.m2下面。<br>修改 .m2 文件夹中的setting.xml 中的 <mirrors>元素。添加<mirror>子元素如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;  </span><br><span class="line">    &lt;id&gt;alimaven&lt;/id&gt;  </span><br><span class="line">    &lt;name&gt;aliyun maven&lt;/name&gt;  </span><br><span class="line">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;  </span><br><span class="line">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;          </span><br><span class="line">  &lt;/mirror&gt;  </span><br><span class="line">&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure></mirror></mirrors></p><p>阿里云的镜像，亲测很快。以后都用它了。</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git工程批量更新和自动提交</title>
      <link href="/2016/09/22/git_push/"/>
      <url>/2016/09/22/git_push/</url>
      <content type="html"><![CDATA[<h2 id="git工程批量更新"><a href="#git工程批量更新" class="headerlink" title="git工程批量更新"></a>git工程批量更新</h2><p>用gitbash客户端都有一种不爽，更新多个工程需要很多的fetch，rebase，stash等命令，所以无聊就看了下shell脚本，看能不能批量fetch，rebase，搞了下，还是可以的，不过我这个是直接pull，直接合并到当前工程。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'**********选择更新的git项目**********'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'0.all'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'1.jiaxin_lib_core'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'2.jiaxin_lib_dubbox'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'3.jiaxin_web_devcenter'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'4.jiaxin_web_agent'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'5.jiaxin_web_conf'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'6.jiaxin_gw_statistics'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'7.jiaxin_gw_config'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'8.jiaxin_gw_container'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'9.jiaxin_gw_order'</span></span><br><span class="line"><span class="built_in">read</span> project</span><br><span class="line">               <span class="comment">#在控制台输入1 2 3，它们之间用空格隔开。</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 0  ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_lib_core-----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_lib_core &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_lib_dubbox-----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_lib_dubbox &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_web_devcenter-----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_web_devcenter &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_web_agent-----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_web_agent &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_web_conf-----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_web_conf &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_gw_statistics-----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_gw_statistics &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_gw_config-----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_gw_config &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_gw_container-----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_gw_container &amp;&amp; git checkout *.jar &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_gw_order-----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_gw_order &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 1 ;<span class="keyword">then</span>   </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_lib_core-START-----------------------'</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> jiaxin_lib_core &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_lib_core-END-----------------------'</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 2  ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_lib_dubbox-START----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_lib_dubbox &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_lib_dubbox-END-----------------------'</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 3  ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_web_devcenter-START----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_web_devcenter &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_web_devcenter-END-----------------------'</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 4  ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_web_agent-START----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_web_agent &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_web_agent-END-----------------------'</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 5  ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_web_conf-START----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_web_conf &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_web_conf-END-----------------------'</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 6  ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_gw_statistics-START----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_gw_statistics &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_gw_statistics-END-----------------------'</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 7  ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_gw_config-START----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_gw_config &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_gw_config-END-----------------------'</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 8  ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_gw_container-START----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_gw_container &amp;&amp; git checkout *.jar &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_gw_container-END-----------------------'</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 9  ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_gw_order-START----------------------'</span></span><br><span class="line"><span class="built_in">cd</span> jiaxin_gw_order &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_gw_order-END-----------------------'</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><h2 id="git工程push"><a href="#git工程push" class="headerlink" title="git工程push"></a>git工程push</h2><pre><code class="bash"><span class="comment">#/bin/bash</span><span class="built_in">echo</span> <span class="string">'**********选择push的git项目**********'</span><span class="built_in">echo</span> <span class="string">'1.jiaxin_lib_core'</span><span class="built_in">echo</span> <span class="string">'2.jiaxin_lib_dubbox'</span><span class="built_in">echo</span> <span class="string">'3.jiaxin_web_devcenter'</span><span class="built_in">echo</span> <span class="string">'4.jiaxin_web_agent'</span><span class="built_in">echo</span> <span class="string">'5.jiaxin_web_conf'</span><span class="built_in">echo</span> <span class="string">'6.jiaxin_gw_statistics'</span><span class="built_in">echo</span> <span class="string">'7.jiaxin_gw_config'</span><span class="built_in">echo</span> <span class="string">'8.jiaxin_gw_order'</span><span class="built_in">read</span> project<span class="built_in">echo</span> <span class="string">'请输入提交参数commit：'</span><span class="built_in">read</span> commit               <span class="comment">#在控制台输入1 2 3，它们之间用空格隔开。</span><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 1 ;<span class="keyword">then</span>   <span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_lib_core-START-----------------------'</span> <span class="built_in">cd</span> jiaxin_lib_core &amp;&amp; git add -A &amp;&amp; git commit -m <span class="variable">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class="keyword">for</span>/master &amp;&amp; <span class="built_in">cd</span> ..<span class="built_in">echo</span> <span class="string">'------------------------jiaxin_lib_core-END-----------------------'</span>;<span class="keyword">fi</span><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 2  ;<span class="keyword">then</span><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_lib_dubbox-START----------------------'</span><span class="built_in">cd</span> jiaxin_lib_dubbox &amp;&amp; git add -A &amp;&amp; git commit -m <span class="variable">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class="keyword">for</span>/master &amp;&amp; <span class="built_in">cd</span> ..<span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_lib_dubbox-END-----------------------'</span>;<span class="keyword">fi</span><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 3  ;<span class="keyword">then</span><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_web_devcenter-START----------------------'</span><span class="built_in">cd</span> jiaxin_web_devcenter &amp;&amp; git add -A &amp;&amp; git commit -m <span class="variable">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class="keyword">for</span>/master &amp;&amp; <span class="built_in">cd</span> ..<span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_web_devcenter-END-----------------------'</span>;<span class="keyword">fi</span><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 4  ;<span class="keyword">then</span><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_web_agent-START----------------------'</span><span class="built_in">cd</span> jiaxin_web_agent &amp;&amp; git add -A &amp;&amp; git commit -m <span class="variable">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class="keyword">for</span>/master &amp;&amp; <span class="built_in">cd</span> ..<span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_web_agent-END-----------------------'</span>;<span class="keyword">fi</span><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 5  ;<span class="keyword">then</span><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_web_conf-START----------------------'</span><span class="built_in">cd</span> jiaxin_web_conf &amp;&amp; git add -A &amp;&amp; git commit -m <span class="variable">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class="keyword">for</span>/master &amp;&amp; <span class="built_in">cd</span> ..<span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_web_conf-END-----------------------'</span>;<span class="keyword">fi</span><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 6  ;<span class="keyword">then</span><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_gw_statistics-START----------------------'</span><span class="built_in">cd</span> jiaxin_gw_statistics &amp;&amp; git add -A &amp;&amp; git commit -m <span class="variable">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class="keyword">for</span>/master &amp;&amp; <span class="built_in">cd</span> ..<span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_gw_statistics-END-----------------------'</span>;<span class="keyword">fi</span><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 7  ;<span class="keyword">then</span><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_gw_config-START----------------------'</span><span class="built_in">cd</span> jiaxin_gw_config &amp;&amp; git add -A &amp;&amp; git commit -m <span class="variable">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class="keyword">for</span>/master &amp;&amp; <span class="built_in">cd</span> ..<span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_gw_config-END-----------------------'</span>;<span class="keyword">fi</span><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$project</span> -eq 8  ;<span class="keyword">then</span><span class="built_in">echo</span> <span class="string">'------------------------jiaxin_gw_order-START----------------------'</span><span class="built_in">cd</span> jiaxin_gw_order &amp;&amp; git add -A &amp;&amp; git commit -m <span class="variable">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class="keyword">for</span>/master &amp;&amp; <span class="built_in">cd</span> ..<span class="built_in">echo</span> <span class="string">'-----------------------jiaxin_gw_order-END-----------------------'</span>;<span class="keyword">fi</span>  </code></pre><h2 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h2><p>使用git客户端切换到git的根目录，执行脚本命令即可。</p><pre><code class="bash">./update.sh</code></pre><p>或</p><pre><code class="bash">./push.sh</code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>脚本放到git根目录，其实不放也可以的。你喜欢，<a href="/img/git.png">我的脚本位置</a></li><li>根据个人需要修改相应git命令，以免造成代码混乱，容易产生冲突</li><li>还有push的时候，也是需要按照个人需要修改的，因为git add的时候是全部的，最好区分一下</li><li><strong>相关代码已上传到github</strong>          <strong><a href="https://github.com/wenthywang/pullAndpush" target="_blank" rel="noopener">链接</a></strong></li></ul>]]></content>
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mybatis调用存储过程报错</title>
      <link href="/2016/09/20/Mybatis_error/"/>
      <url>/2016/09/20/Mybatis_error/</url>
      <content type="html"><![CDATA[<h2 id="Mybatis调用存储过程"><a href="#Mybatis调用存储过程" class="headerlink" title="Mybatis调用存储过程"></a>Mybatis调用存储过程</h2><h3 id="贴码"><a href="#贴码" class="headerlink" title="贴码"></a>贴码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Error querying database.  Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with <span class="string">"noAccessToProcedureBodies=true"</span> to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.</span><br><span class="line"> The error may exist <span class="keyword">in</span> resources/mapper/AgentStatisDao.xml</span><br><span class="line"> The error may involve com.jiaxincloud.gw.statistics.dao.statistics.AgentStatisDao.callAgentVisitorManualStatisProcedure</span><br><span class="line"> The error occurred <span class="keyword">while</span> executing a query</span><br><span class="line"> SQL: &#123;CALL PRO_AGENT_VISITOR_MANUAL_STATIS(?,?,?)&#125;</span><br><span class="line"> Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with <span class="string">"noAccessToProcedureBodies=true"</span> to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>跟着这个错误在网上找了一下，原来是该用户没有调用存储过程的权限，所以只要赋予proc的权限即可，亲测成功。在MySql中执行如下命令，授予权限。(user@host 是连接数据库的用户名，修改成连接数据库的用户名就行)</p><pre><code class="bash">grant select on mysql.proc to user@host;flush privileges;</code></pre>]]></content>
      
      <categories>
          
          <category> Mybatis </category>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 存储过程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Hexo+Git+Nodejs搭建个人博客</title>
      <link href="/2016/09/11/Hexo_blog/"/>
      <url>/2016/09/11/Hexo_blog/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;处于好奇，看到别人搞自己的博客，自己也想尝试一番，没想到，弄着弄着就喜欢上了，有时候真是挡也挡不住。遇到的问题也是甚多。刚才发现md的语法原来没有两个空格的，网上有说法使用<code>&amp;emsp;&amp;emsp;</code>反正我是这么用了，因为我用不了输入法的全角的两个空格，我的输入法是win10自带的输入法，所以如果某f有输入法可以尝试一下哦。好了，废话不说了。上教程。</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>首先也是必须要注册一个<a href="https://github.com/" title="github" target="_blank" rel="noopener">Git</a>，注册流程就不多说了，反正都是一样了，然后就新增一个Repository，<strong>名字必须是XXX.github.io,也必须是master主干，xxx是你的git的用户名</strong><img src="/img/git1.png" alt="参考">  创建完成后，需要git客户端，客户端下载就不说了，百度都有。</li></ul><h2 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h2><p>&emsp;&emsp;首先要安装<a href="https://nodejs.org/download/" target="_blank" rel="noopener">nodejs</a>挺多版本的 我的npm是1.4.28版本 作用是生成一些静态的html，安装成功后 可输入命令<br><code>mpn -v</code><br>查看当前版本 如果查看不了 证明安装失败，那就要重新安装了。</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><ul><li><p>正式安装Hexo 建立文件夹hexo，切换到当前文件夹下，输入命令<br><code>npm install -g hexo</code><br>安装hexo，速度的快慢要看你的网速了。  </p></li><li><p>执行初始化hexo,命令：<br><code>hexo init</code>  </p></li><li>启动本地服务命令：<br><code>hexo server</code>（hexo s也可以）  </li><li>浏览器输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>  </li></ul><p><strong>浏览器有出现hexo的主题页面</strong>，证明安装成功了，若没出现，可以看下哪里配置出问题，一般是没有问题的。</p><h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><ul><li><p>找到hexo的配置文件_config.yml,这个文件在hexo的根目录下，打开配置文件。进行如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git  </span><br><span class="line">repository: git@github.com:wenthywang/wenthywang.github.io.git  </span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li><li><p>执行命令：<br><code>npm install hexo-deployer-git --save</code><br><strong><em>网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.2.2，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。</em></strong></p></li><li><p>执行配置命令：<br><code>hexo deploy(hexo d)</code></p></li><li>浏览器中输入<code>http://wenthywang.github.io/</code>就行了，我的github的账户叫wenthywang,把这个改成你github的账户名就行了</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>三步走：</p><ul><li><p>hexo clean</p></li><li><p>hexo generate(hexo g)</p></li><li><p>hexo deploy(hexo d)</p></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>hexo new”postName” #新建文章</p></li><li><p>hexo new page”pageName” #新建页面</p></li><li><p>hexo generate #生成静态页面至public目录</p></li><li><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p></li><li><p>hexo deploy #将.deploy目录部署到GitHub</p></li><li><p>hexo help # 查看帮助</p></li><li><p>hexo version #查看Hexo的版本</p></li></ul>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>项目中POI导出出现HTML特殊符号的实体--已解决</title>
      <link href="/2016/07/28/POI_error/"/>
      <url>/2016/07/28/POI_error/</url>
      <content type="html"><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><pre><code>导出excel 时出现 类似这样的&amp;gt;符号，大概是存到数据库也是这样，然后jsp解析可以解析出来，但是java不认得，需要个人写出解析方法。</code></pre><h2 id="废话不说-贴码："><a href="#废话不说-贴码：" class="headerlink" title="废话不说,贴码："></a>废话不说,贴码：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  /**</span><br><span class="line">*转换html特殊符号。</span><br><span class="line">* @param content 需要转换的html特殊符号</span><br><span class="line">* @param defaultName 默认返回值</span><br><span class="line">* @<span class="built_in">return</span> 转化后实际的符号</span><br><span class="line">*/</span><br><span class="line">public static String transferHtml(String content, String defaultName) &#123;</span><br><span class="line"><span class="keyword">if</span>(content==null) <span class="built_in">return</span> defaultName; </span><br><span class="line">String html = content;</span><br><span class="line">html = StringUtils.replace(html, <span class="string">"&amp;quot;"</span>, <span class="string">"\""</span>);</span><br><span class="line">html = StringUtils.replace(html, <span class="string">"&amp;lt;"</span>, <span class="string">"&lt;"</span>);</span><br><span class="line">html = StringUtils.replace(html, <span class="string">"&amp;gt;"</span>, <span class="string">"&gt;"</span>);</span><br><span class="line">html = StringUtils.replace(html, <span class="string">"&amp;gt;"</span>, <span class="string">"&gt;"</span>);</span><br><span class="line">html = StringUtils.replace(html, <span class="string">"&amp;sim;"</span>, <span class="string">"~"</span>);</span><br><span class="line">html = StringUtils.replace(html, <span class="string">"&amp;and;"</span>, <span class="string">"^"</span>);</span><br><span class="line">html = StringUtils.replace(html, <span class="string">"&amp;hellip;"</span>, <span class="string">"..."</span>);</span><br><span class="line"><span class="built_in">return</span> html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><pre><code>StringUtils用的是apach的工具类。</code></pre><p>另外，我也找过度娘，对比了一下StringUtils的replace和String自带的replaceAll方法。</p><p>具体就参考 <a href="http://blog.sina.com.cn/s/blog_8f99a1640102v6q2.html" target="_blank" rel="noopener"><strong>String自带replaceAll和StringUtils工具类replace区别</strong></a>    这博主分析得挺不错的。</p><p>另外我也度了一下html特殊符号的对照表，具体参考 <a href="http://tool.chinaz.com/tools/htmlchar.aspx" target="_blank" rel="noopener"><strong>HTML 特殊符号编码对照表</strong></a></p><pre><code>总结：根据个人需要把某些常用的特殊符号解析添加到自己的项目中去。</code></pre>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> POI </tag>
            
            <tag> 特殊符号 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC静态资源加载出错--未解决</title>
      <link href="/2016/02/19/SpringMVC_error/"/>
      <url>/2016/02/19/SpringMVC_error/</url>
      <content type="html"><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><pre><code>使用mvc：resource配置web.xml配置是rest风格的/</code></pre><p>服务器启动没问题 访问地址是报404</p><pre><code>另外用了default-servlet的方法加载，服务器启动没错，jsp页面加载静态资源要使用绝对路径才能加载，使用相对路径都加载不了。</code></pre><p>希望有大神来解答一下</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringMVC </category>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> 静态资源 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC报错</title>
      <link href="/2016/01/11/SpringMVC_erro1/"/>
      <url>/2016/01/11/SpringMVC_erro1/</url>
      <content type="html"><![CDATA[<h2 id="spring-报错"><a href="#spring-报错" class="headerlink" title="spring 报错"></a>spring 报错</h2><h3 id="贴码"><a href="#贴码" class="headerlink" title="贴码"></a>贴码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">  org.springframework.core.convert.ConversionFailedException: Failed to convert from <span class="built_in">type</span> java.util.ArrayList&lt;?&gt; to <span class="built_in">type</span> java.util.List&lt;org.springframework.core.io.Resource&gt; <span class="keyword">for</span> value <span class="string">'[/img/]'</span>; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class="built_in">type</span> java.lang.String to <span class="built_in">type</span> org.springframework.core.io.Resource</span><br><span class="line">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)</span><br><span class="line">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:169)</span><br><span class="line">at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:161)</span><br><span class="line">at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:450)</span><br><span class="line">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:496)</span><br><span class="line">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:490)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1437)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1396)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory<span class="variable">$1</span>.getObject(AbstractBeanFactory.java:295)</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:647)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:598)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:661)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:517)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:458)</span><br><span class="line">at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:138)</span><br><span class="line">at javax.servlet.GenericServlet.init(GenericServlet.java:158)</span><br><span class="line">at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284)</span><br><span class="line">at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197)</span><br><span class="line">at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:864)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:134)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</span><br><span class="line">at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:957)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)</span><br><span class="line">at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)</span><br><span class="line">at org.apache.coyote.AbstractProtocol<span class="variable">$AbstractConnectionHandler</span>.process(AbstractProtocol.java:620)</span><br><span class="line">at org.apache.tomcat.util.net.JIoEndpoint<span class="variable">$SocketProcessor</span>.run(JIoEndpoint.java:316)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:615)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread<span class="variable">$WrappingRunnable</span>.run(TaskThread.java:61)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class="built_in">type</span> java.lang.String to <span class="built_in">type</span> org.springframework.core.io.Resource</span><br><span class="line">at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:276)</span><br><span class="line">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:172)</span><br><span class="line">at org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:74)</span><br><span class="line">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)</span><br><span class="line">... 42 more</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我在springmvc.xml配置了mvc：resoure，配置信息如下：</p><pre><code class="bash">&lt;mvc:resources location=<span class="string">"/js/"</span> mapping=<span class="string">"/js/**"</span>/&gt;&lt;mvc:resources location=<span class="string">"/img/"</span> mapping=<span class="string">"/img/**"</span>/&gt;</code></pre><p>如上错误 ，用的是spring3.2的包，程序运行没问题，静态资源可以加载，但是不知道怎么会报这个错，求问怎么解决？？？</p><p>网上找不到解决的办法。求好心人能帮忙解答</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringMVC </category>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> 静态资源 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2015最后一日公瑾</title>
      <link href="/2015/12/31/2015_last/"/>
      <url>/2015/12/31/2015_last/</url>
      <content type="html"><![CDATA[<p>今天是2015年的最后一天，想想自己14号进来，两个星期好想都在闲逛，带我的@刘俊杰 好像都没有任务给我，然后就不知道干什么就一天了，他叫我继续看api的东西，我基本上全都看完了，大概有个了解，做个demo的也是可以的。他好像不怎么急，我也不想催他，免得他觉得我太过仓促，觉得我对事情不负责这样的。我就继续深究api的东西，昨天看了很久，也明白了很多东西。</p><p>公司的api接口是整个系统的所有api调用的接口，公司业务也是很复杂的。PS：怎么博客园插入图片不行的呀，不会插，请博客园的大神教教。</p><p>用debug来调试对应的junit的测试方法，然后发现有些地方不知道怎么走。首先是httpclient的模拟客户端发送请求，是发送到哪里的呢，之前没有用过，所以就百度了一下，是发送到对应的url，而发送的地址是a,过了一会是b.原来进行业务操作的时候，是要用户登录验证的，首先要调到验证的url然后返回对应的json数据，通过对应的Token来验证用户是否登录成功，现在我还不清楚token是用来干嘛的，之前在看慕课的微信开发的时候看到过，我也没有实践，不是很清楚了。这个验证应该是网页版的和微信公众号是调用同一个接口，然后就到了restController。</p><h3 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a>核心代码：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* REST调用入口。</span><br><span class="line">* @param request</span><br><span class="line">* HttpServletRequest</span><br><span class="line">* @param method</span><br><span class="line">* String</span><br><span class="line">* @<span class="built_in">return</span> RestResponse</span><br><span class="line">* @throws Exception</span><br><span class="line">* 异常</span><br><span class="line">*/</span><br><span class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">public Object rest(HttpServletRequest request, String method) throws Exception &#123;</span><br><span class="line">// 获取接口API名称</span><br><span class="line">String api = <span class="string">""</span>;</span><br><span class="line">Matcher matcher = uriPattern.matcher(request.getRequestURI());</span><br><span class="line"><span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">api = matcher.group(1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(api)) &#123;</span><br><span class="line"><span class="built_in">return</span> ResponseUtils.getFailed(RestErrorCode.SERVICEISNOTEXIST, <span class="string">"该服务不存在"</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">String channel = request.getHeader(<span class="string">"channel"</span>);</span><br><span class="line">// 请求头信息</span><br><span class="line">Map&lt;String, Object&gt; header = new HashMap&lt;String, Object&gt;();</span><br><span class="line">header.put(<span class="string">"method"</span>, method);</span><br><span class="line">header.put(<span class="string">"channel"</span>, channel);</span><br><span class="line"><span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">log.info(<span class="string">"访问接口API:"</span> + api);</span><br><span class="line">&#125;</span><br><span class="line">// 判断是否合法渠道</span><br><span class="line"><span class="keyword">if</span> (!ChannelConstant.validateChannel(channel)) &#123;</span><br><span class="line"><span class="built_in">return</span> ResponseUtils.getFailed(RestErrorCode.CHANNELNOTEXIST, channel + <span class="string">"填写的渠道不存在，请确认渠道信息"</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">SdkClient.setChannel(channel);</span><br><span class="line">Object result = APIFactory.call(getUrl(appVo.getUrl()), header, paramMap);</span><br><span class="line">resultMap.put(appVo.getUrl() + appVo.getSort(), result);</span><br><span class="line">&#125;</span><br><span class="line">Object result = APIFactory.call(getUrl(appVo2.getUrl()), header, paramMap);</span><br><span class="line">resultMap.put(appVo2.getUrl() + appVo2.getSort(), result);</span><br><span class="line">&#125; catch (FtspException ex) &#123;</span><br><span class="line">log.error(appVo2.getUrl() + <span class="string">"自定义错误信息"</span>, ex);</span><br><span class="line">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</span><br><span class="line">FtspJSONUtil.objectToJsonString(</span><br><span class="line">ResponseUtils.getFailed(StringUtils.isEmpty(ex.getErrorCode())?RestErrorCode.FTSPEXCEPTION:ex.getErrorCode(), ex.getMessage(), <span class="string">""</span>)));</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">log.error(appVo2.getUrl() + <span class="string">"请求接口失败"</span>, e);</span><br><span class="line">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</span><br><span class="line">FtspJSONUtil.objectToJsonString(</span><br><span class="line">ResponseUtils.getFailed(RestErrorCode.SYSTEMERROR, <span class="string">"服务器繁忙！"</span>, <span class="string">""</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> ResponseUtils.getSuccess(<span class="string">"业务操作成功"</span>, RestOperateCode.GET_DATA, resultMap);</span><br><span class="line">&#125;</span><br><span class="line">//小接口</span><br><span class="line"><span class="built_in">return</span> execution(request, api, channel, header);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><pre><code>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。</code></pre><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p> 一开始不知道rest是什么，然后就百度了一下，就有了这串东西，然后就有了大概。用户的请求都会经过这个restController，然后就有了一个问题，为什么会到这个Controller不到其他了呢，应该有个xml来配置，还没有找。公司里的xml很多，内容也是够多的，每次看xml的时候很多时候就会蒙掉，因为都用了狠多业务的拼音还有一些不知道什么的东西，这些东西要自己摸索，我也没问是俊杰。至今我也是了解了不少了。<br> 用户进行业务操作会有两个请求这个是必须的。然后里面涉及到的细节问题，我也百度查了下，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private static Pattern uriPattern = Pattern.compile(<span class="string">"/api/([\\w\\/]+)"</span>);</span><br><span class="line">   Matcher matcher = uriPattern.matcher(request.getRequestURI());//使用了正则表达式获得相关字符串</span><br><span class="line">    apis.put(<span class="string">"sap/fpxx/cgfp"</span>, (API) ContextInit.getContext().getBean(<span class="string">"ftsp_api_sap_cgfpAPI"</span>));  @Component(value = <span class="string">"ftsp_api_sap_djxx_jsfsAPI"</span>)// spring的装配功能，对应的组件申明value，来作为beanID</span><br><span class="line">    List&lt;NameValuePair&gt; nvps = new ArrayList&lt;NameValuePair&gt;();//声明键值 来用来传参数 使用httppost的时候</span><br></pre></td></tr></table></figure></p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>以前也看过一些加解密技术，也只是有个了解而已，没有深入的了解，深入的研究。</p><pre><code>引用：MD5将任意长度的“字节串”映射为一个128bit的大整数，并且是通过该128bit反推原始字符串是困难的，换句话说就是，即使你看到源    程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原    理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。所以，要遇到了md5密码的问题，比较好的办法是：你可以用这个系统中的md5()函数重新设一个密码，如admin，把生成的一串密码的Hash值覆盖原来的Hash值就行了。 </code></pre><p>MD5是消息摘要算法，数字签名，易懂来说就是每个人的指纹了。一旦对一样东西使用了MD5，就是你按了指纹，没有你的指纹没人能动你的东西。现实生活中，可以模拟人的指纹去干一些不好的事，类似的MD5也不会例外，就好像一开始指纹作为安全的保障，然后现在指纹也变得不安全了，因此MD5也是在劫难逃的。我在想，除了跑字典，还有更好的方式来破解MD5吗？暂时还没有想到，想到我就不是一般人，哈哈。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>感觉个人学计算机的东西很多，然后很多都有去涉猎了一下，大概有个了解，而并没有对一样自己喜欢东西去研究，去发展，现在做的ｊａｖａ也不是我很想要的，觉得自己就是被生活逼迫到要学一样东西去找工作，而不是因为自己喜欢来学。我比较喜欢安全这方面的东西，安全涉及的东西真的很多，以前想学一些黑客的东西，然后就没了，后面到了游戏外挂，然后也没了然后了，总结了一点，计算机网络一定要学好。哈哈，想着自己计算机网络也是刚好６０分。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> 实习 </category>
          
          <category> REST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Rest </tag>
            
            <tag> API </tag>
            
            <tag> MD5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>公瑾科技给我的...</title>
      <link href="/2015/12/23/kungeek/"/>
      <url>/2015/12/23/kungeek/</url>
      <content type="html"><![CDATA[<p> 今天主要是浏览了公司的api的各种测试类，在测试的时候出现很多问题，如登陆的非法问题，原因是有个tokenRefresh的类需要更新，然后才能测试api的各种类。测试类的时候，会用debug来运行junit测试，来看看整个测试时怎么走，在走的过程中，也遇到过很多问题，公司里面很多类都通过jar包来管理，所以debug到一定的类时会有找不到类的情况，所以单步的时候很多时候都会头晕了。另外，再看看公司的代码规范文档，有很多问题在代码上面需要注意的。还有一点就是公司的项目用到的技术真的很多，有持续集成的，有ivy的，文档都有说到。公司用到的服务器也是Jenkins，下面内容来自</p><p><a href="http://www.ibm.com/developerworks/cn/java/j-lo-jenkins/" target="_blank" rel="noopener">Jenkins</a>.</p><h2 id="持续集成概述"><a href="#持续集成概述" class="headerlink" title="持续集成概述"></a>持续集成概述</h2><h3 id="什么是持续集成"><a href="#什么是持续集成" class="headerlink" title="什么是持续集成"></a>什么是持续集成</h3><p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。</p><p>持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。</p><p>持续集成的核心价值在于：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。</span><br><span class="line">持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。</span><br><span class="line">持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。</span><br></pre></td></tr></table></figure></p><h3 id="持续集成的原则"><a href="#持续集成的原则" class="headerlink" title="持续集成的原则"></a>持续集成的原则</h3><p>业界普遍认同的持续集成的原则包括：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需要版本控制软件保障团队成员提交的代码不会导致集成失败，常用的版本控制软件有 IBM Rational ClearCase、CVS、Subversion 等。</span><br><span class="line">开发人员必须及时向版本控制库中提交代码，也必须经常性地从版本控制库中更新代码到本地。</span><br><span class="line">需要有专门的集成服务器来执行集成构建，根据项目的具体实际，集成构建可以被软件的修改来直接触发，也可以定时启动，如每半个小时构建一次。</span><br><span class="line">必须保证构建的成功;如果构建失败，修复构建过程中的错误是优先级最高的工作。一旦修复，需要手动启动一次构建。</span><br></pre></td></tr></table></figure></p><h3 id="持续集成系统的组成"><a href="#持续集成系统的组成" class="headerlink" title="持续集成系统的组成"></a>持续集成系统的组成</h3><p>由此可见，一个完整的构建系统必须包括：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个自动构建过程，包括自动编译、分发、部署和测试等。</span><br><span class="line">一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库。</span><br><span class="line">一个持续集成服务器，Jenkins就是一个配置简单和使用方便的持续集成服务器。</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面的介绍估计了解得差不多了。 </p><p>另外还会有ivy，下面内容是它的简介。</p><pre><code>Apache Ivy 是Apache Ant 的一个子项目，提供了一致、可重复、易于维护的方法，来管理项目的所有构建依赖项。它提供了一些强大的功能包括依赖传递，ant集成, maven存储库兼容，持续集成，html报告等。 公司的项目ivy主要是用来依赖管理啊相关的jar包，跟maven差不多，也是管理jar包一种方式，当时我用 ivy的时候，真的很方便，只要在ivy.xml文件配置jar包。相关的jar包会自动加入到项目中来，这个是我学过很好的管理jar包的工具了。</code></pre><p>傍晚公司有培训，关于网页爬虫的，用java实现的，看到公司这样的氛围是不错的，以前没有接触过网页爬虫，现在听了一课，觉得在一定程度上会给我们带来便利，于是我很认真了听完了整个培训，了解到爬虫的流程，以及代码的实现，相关的算法，突然觉得有时间还是要看看爬虫有关的东西，会给自己带来更好的知识。</p><p>说真的，在这公司给自己带来的收获还是蛮多的，自己也真的学习到很多东西。</p><p>今天开了博客，为了让自己在以后的日子能到自己过去是如何成长的。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="/404.html"/>
      <url>/404.html</url>
      <content type="html"><![CDATA[<!DOCTYPE HTML><html><head>  <meta http-equiv="content-type" content="text/html;charset=utf-8;">  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">  <meta name="robots" content="all">  <meta name="robots" content="index,follow">  <link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"></head><body>  <script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="回到我的主页">  </script>  <script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script>  <script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"></script></body></html>]]></content>
    </entry>
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="王文辉"><a href="#王文辉" class="headerlink" title="王文辉"></a>王文辉</h1><blockquote><p>一个对技术充满好奇的小伙子</p></blockquote><p><em>涉世未深，有着洞察世界的眼</em>   </p><p><strong> 涉猎了很多程序相关的书籍，喜欢一个人做研究与思考</strong>  </p><p><strong> <em>but</em>…..我更想和别人分享和交流想法…..特别是你…..come on </strong></p><p><img src="/img/img2.jpg" alt="NexT Schemes"></p><h2 id="目前Status"><a href="#目前Status" class="headerlink" title="目前Status"></a>目前Status</h2><p>  在一家初创公司  做Java开发  每一次完成公司的需求都会有很大的成就感<br>  感觉在学习 不是在工作<br>    <blockquote><p>Working is Study</p></blockquote>  </p><blockquote><p> <strong>Working is Study</strong><br> <strong>Study is working</strong></p></blockquote><h2 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h2><p>学习过C++,C#,汇编语言，外挂制作，反编译等。<br>曾经对技术的热爱，你无法想象  。</p><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p><strong>better than present</strong></p>]]></content>
    </entry>
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
